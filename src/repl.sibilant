(defvar input      (process.open-stdin)
        output     process.stdout
        vm         (require 'vm)
        readline   (send (require 'readline) create-interface input output)
        sibilant   (require "./sibilant")
        context    undefined
        cmd-buffer ""
        util       (require 'util))

(defun create-context ()
  (defvar context (vm.create-context))
  (set module 'filename (concat (process.cwd) "/exec"))
  (set context
       'module  module
       'require require)
  (each-key key global (set context key (get global key)))
  context)

(setf context (create-context))

(defun display-prompt ()
  (readline.set-prompt
   (concat (if (> cmd-buffer.length 10)
             (concat "..." (cmd-buffer.slice -10))
             (if (> cmd-buffer.length 0) cmd-buffer "sibilant"))
           "> "))
  (readline.prompt))

(readline.on 'line
             (lambda (cmd)
               (defvar js-line "")

               (try
                 (progn
                   (setf cmd-buffer (concat cmd-buffer cmd))
                   (each
                     (lambda (stmt)
                     (setf js-line (concat js-line
                                           (sibilant.translate stmt 'statement))))
                     (sibilant.tokenize cmd-buffer))
                   (defvar result (vm.run-in-context js-line context "sibilant-repl"))
                   (set readline.history 0 cmd-buffer)
                   (when (defined? result)
                     (output.write (concat "result: "
                                           (util.inspect result) "\n")))
                   (set context "_" result)
                   (setf cmd-buffer ""))
                 (progn
                   (if (e.message.match /unexpected EOF/)
                     (progn
                       (setf cmd-buffer (concat cmd-buffer " "))
                       (readline.history.shift))
                     (progn
                       (set readline.history 0 cmd-buffer)
                       (output.write (concat e.stack "\n"))
                       (setf  cmd-buffer "")))))
               (display-prompt)))

(readline.on 'close input.destroy)

(display-prompt)
